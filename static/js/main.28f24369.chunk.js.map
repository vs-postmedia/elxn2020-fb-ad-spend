{"version":3,"sources":["fonts/Shift-BoldItalic.otf","fonts/Shift-Bold.otf","fonts/BentonSansCond-Regular.otf","fonts/BentonSansCond-RegItalic.otf","fonts/BentonSansCond-Bold.otf","fonts/BentonSansCond-BoldItalic.otf","js/helper-functions.js","components/StatBox/StatBox.js","components/SummaryBox/SummaryBox.js","components/AdSpendTracker/AdSpendTracker.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","months","helper","numberWithCommas","x","toString","replace","map","num","in_min","in_max","out_min","out_max","getPostmediaMonth","StatBox","props","className","data","party","toLowerCase","total","SummaryBox","stats","date","lastUpdate","split","month","parseInt","day","d","i","key","AdSpendTracker","state","party_data","party_daily","Axios","get","this","dataUrl","then","resp","console","log","setState","last_update","party_total","length","src","title","frameBorder","scrolling","width","height","aria-label","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sHAAAA,EAAOC,QAAU,IAA0B,8C,sKCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,oD,gBCA3CD,EAAOC,QAAU,IAA0B,sD,gBCA3CD,EAAOC,QAAU,IAA0B,iD,gBCA3CD,EAAOC,QAAU,IAA0B,uD,0HCArCC,EAAS,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,MAAO,OAAQ,OAAQ,OAAQ,QAAS,OAAQ,OAAQ,QAczFC,EAbA,CACdC,iBADc,SACGC,GACb,OAAOA,EAAEC,WAAWC,QAAQ,wBAAyB,MAEzDC,IAJc,SAIVC,EAAKC,EAAQC,EAAQC,EAASC,GACjC,OAAQJ,EAAMC,IAAWG,EAAUD,IAAYD,EAASD,GAAUE,GAEnEE,kBAPc,SAOIT,GACjB,OAAOH,EAAOG,KCMDU,G,MAVC,SAACC,GAEhB,OACC,yBAAKC,UAAU,QACd,uBAAGA,UAAS,kBAAaD,EAAME,KAAKC,MAAMC,gBAA1C,WAAgEjB,EAAOC,iBAAiBY,EAAME,KAAKG,SACnG,uBAAGJ,UAAU,SAASD,EAAME,KAAKC,UCoBrBG,G,MAzBI,SAACN,GACnB,IAAMO,EAAQP,EAAME,KAEdM,EAAOR,EAAMS,WAAWC,MAAM,KAE9BC,EAAQxB,EAAOW,kBAAkBc,SAASJ,EAAK,IAAM,GACrDK,EAAML,EAAK,GAEjB,OACC,yBAAKP,UAAU,eACd,yBAAKA,UAAU,YAEbM,EAAMf,KAAI,SAACsB,EAAEC,GACZ,OACC,kBAAC,EAAD,CAASb,KAAMY,EAAGE,IAAKD,QAK3B,uBAAGd,UAAU,eAAb,wBAA6CU,EAA7C,YAAsDE,OCjBpCI,G,kNACpBC,MAAQ,CACPC,WAAY,GACZC,YAAa,I,kEAGO,IAAD,OACnBC,IAAMC,IAAIC,KAAKvB,MAAMwB,SACnBC,MAAK,SAAAC,GACLC,QAAQC,IAAIF,EAAKxB,MACjB,EAAK2B,SAAS,CACbC,YAAaJ,EAAKxB,KAAKO,WACvBU,WAAYO,EAAKxB,KAAK6B,YACtBX,YAAaM,EAAKxB,KAAKkB,mB,+BAM1B,OAAIG,KAAKL,MAAMC,WAAWa,OAAS,EAEjC,kBAAC,WAAD,KACC,kBAAC,EAAD,CAAY/B,UAAU,cACrBC,KAAMqB,KAAKL,MAAMC,WACjBV,WAAYc,KAAKL,MAAMY,cAExB,4BAAQG,IAAI,iDAAiDC,MAAM,cAAcC,YAAY,IAAIC,UAAU,KAAKC,MAAM,OAAOC,OAAO,MAAMC,aAAW,MAMtJ,kBAAC,WAAD,U,GAhCwCC,c,MCU7BC,MAXf,WACC,OACG,yBAAKxC,UAAU,OACd,0FACA,kBAAC,EAAD,CACCuB,QAPa,+ECQCkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0CCCNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8G3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,MAAK,SAAA6B,GACjCA,EAAaC,kB","file":"static/js/main.28f24369.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Shift-BoldItalic.5c3edbfd.otf\";","module.exports = __webpack_public_path__ + \"static/media/Shift-Bold.cdd38a86.otf\";","module.exports = __webpack_public_path__ + \"static/media/BentonSansCond-Regular.43cd4ac7.otf\";","module.exports = __webpack_public_path__ + \"static/media/BentonSansCond-RegItalic.69a4217c.otf\";","module.exports = __webpack_public_path__ + \"static/media/BentonSansCond-Bold.6f6753fd.otf\";","module.exports = __webpack_public_path__ + \"static/media/BentonSansCond-BoldItalic.a6640d89.otf\";","const months = ['Jan.', 'Feb.', 'Mar.', 'Apr.', 'May', 'June', 'July', 'Aug.', 'Sept.', 'Oct.', 'Nov.', 'Dec.']\nconst helper = {\n\tnumberWithCommas(x) {\n\t    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n\t},\n\tmap(num, in_min, in_max, out_min, out_max) {\n\t\treturn (num - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;\n\t},\n\tgetPostmediaMonth(x) {\n\t\treturn months[x];\n\t}\n\t\n};\n\nexport default helper;","import React from 'react';\nimport helper from '../../js/helper-functions';\nimport './StatBox.css';\n\n\nconst StatBox = (props) => {\n\n\treturn (\n\t\t<div className=\"stat\">\n\t\t\t<p className={`big-num ${props.data.party.toLowerCase()}`}>{`$${helper.numberWithCommas(props.data.total)}`}</p>\n\t\t\t<p className=\"label\">{props.data.party}</p>\n\t\t</div>\n\t);\n}\t\n\nexport default StatBox;","import React from 'react';\nimport StatBox from '../StatBox/StatBox';\nimport helper from '../../js/helper-functions';\nimport './SummaryBox.css';\n\nconst SummaryBox = (props) => {\n\tconst stats = props.data\n\n\tconst date = props.lastUpdate.split('-');\n\t// not zero-based. ugh.\n\tconst month = helper.getPostmediaMonth(parseInt(date[1]) - 1);\n\tconst day = date[2];\n\n\treturn (\n\t\t<div className=\"summary-box\">\n\t\t\t<div className=\"stat-box\">\n\t\t\t\t{\n\t\t\t\t\tstats.map((d,i) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<StatBox data={d} key={i}></StatBox>\n\t\t\t\t\t\t)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t</div>\n\t\t\t<p className=\"last-update\">{`Last updated: ${month} ${day}`}</p>\n\t\t</div>\n\t);\n}\n\n\nexport default SummaryBox;\n\n","import Axios from 'axios';\nimport React, { Component, Fragment } from 'react';\nimport SummaryBox from '../SummaryBox/SummaryBox';\n// import DailyCharts from '../DailyCharts/DailyCharts';\nimport './AdSpendTracker.css';\n\n\nexport default class AdSpendTracker extends Component {\n\tstate = {\n\t\tparty_data: [],\n\t\tparty_daily: []\n\t}\n\n\tcomponentDidMount() {\n\t\tAxios.get(this.props.dataUrl)\n\t\t\t.then(resp => {\n\t\t\t\tconsole.log(resp.data)\n\t\t\t\tthis.setState({\n\t\t\t\t\tlast_update: resp.data.lastUpdate,\n\t\t\t\t\tparty_data: resp.data.party_total,\n\t\t\t\t\tparty_daily: resp.data.party_daily\n\t\t\t\t});\n\t\t\t})\n\t}\n\n\trender() {\n\t\tif (this.state.party_data.length > 0) {\n\t\t\treturn (\n\t\t\t\t<Fragment>\n\t\t\t\t\t<SummaryBox className=\"summary-box\"\n\t\t\t\t\t\tdata={this.state.party_data}\n\t\t\t\t\t\tlastUpdate={this.state.last_update}>\n\t\t\t\t\t</SummaryBox>\n\t\t\t\t\t<iframe src='https://flo.uri.sh/visualisation/3821637/embed' title='party-spend' frameBorder='0' scrolling='no' width='100%' height='400' aria-label=''></iframe>\n\n\t\t\t\t</Fragment>\n\t\t\t);\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<Fragment />\n\t\t\t)\n\t\t}\n\t}\n}\n\n\n/*\n<DailyCharts\n\tdata={this.state.party_daily}>\n</DailyCharts>\n*/","import React from 'react';\nimport AdSpendTracker from '../AdSpendTracker/AdSpendTracker';\nimport './App.css';\n\nconst adSpendUrl = 'https://vs-postmedia-data.sfo2.digitaloceanspaces.com/elxn/ad-spend.json';\n\nfunction App() {\n\treturn (\n\t  \t<div className=\"App\">\n\t  \t\t<h1>Amount spent on Facebook ads since the election was called</h1>\n\t  \t\t<AdSpendTracker\t\n\t  \t\t\tdataUrl={adSpendUrl}>\n\t  \t\t</AdSpendTracker>\n\t  \t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\n// CSS\nimport './css/index.css';\n\n// FONTS\nimport './fonts/Shift-Bold.otf';\nimport './fonts/Shift-BoldItalic.otf';\nimport './fonts/Shift-BoldItalic.otf';\nimport './fonts/BentonSansCond-Regular.otf';\nimport './fonts/BentonSansCond-RegItalic.otf';\nimport './fonts/BentonSansCond-Bold.otf';\nimport './fonts/BentonSansCond-BoldItalic.otf';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}